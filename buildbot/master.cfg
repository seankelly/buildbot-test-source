# -*- python -*-
# ex: set filetype=python:

import os
import sys

import six

from buildbot.plugins import *

if six.PY2:
    PB_PORT = os.environ['PY2_PB_PORT']
    WWW_PORT = os.environ['PY2_WWW_PORT']
elif six.PY3:
    PB_PORT = os.environ['PY3_PB_PORT']
    WWW_PORT = os.environ['PY3_WWW_PORT']

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### WORKERS

# The 'workers' list defines the set of recognized workers. Each element is
# a Worker object, specifying a unique worker name and password.  The same
# worker name and password must be configured on the worker.
c['workers'] = [
    worker.Worker("source-add", "pass"),
    worker.Worker("source-full-clean", "pass"),
    worker.Worker("source-full-clobber", "pass"),
    worker.Worker("source-full-copy", "pass"),
    worker.Worker("source-full-fresh", "pass"),
    worker.Worker("source-incremental", "pass"),
]

c['protocols'] = {'pb': {'port': PB_PORT}}

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot clone of pyflakes.

p4_options = {
    'p4base': '//test',
    'p4port': '1666',
    'p4user': 'super',
    'p4passwd': 'SuperSuper',
}

c['change_source'] = [
    changes.P4Source(
        pollInterval=300,
        project='p4',
        **p4_options
    ),
]

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.  In this
# case, just kick off a 'runtests' build

c['schedulers'] = [
    schedulers.ForceScheduler(
        name="force-git-full-fresh",
        builderNames=["git-full"],
    ),
    schedulers.ForceScheduler(
        name='force-p4-add',
        builderNames=['p4-add'],
    ),
]

####### BUILDERS

git_full_fresh = util.BuildFactory()
git_full_fresh.addStep(
    steps.Git(
        repourl='git://github.com/buildbot/pyflakes.git',
        mode='full',
        method='fresh'))

### Perforce
p4_env = {
    # This client name is defined by steps.P4.
    'P4CLIENT': 'buildbot_source-add_p4-add',
    'P4PASSWD': 'SuperSuper',
    'P4PORT': '1666',
    'P4USER': 'super',
}
p4_add = util.BuildFactory([
    steps.P4(**p4_options),
    # Open all of the files for editing.
    steps.ShellCommand(
        name='open files',
        command='p4 open *',
        haltOnFailure=True,
        env=p4_env),
    steps.ShellCommand(
        name='make change',
        command=['/usr/local/bin/make-change'],
        haltOnFailure=True),
    # Add all files. This is a no-op for any file that has already been added.
    steps.ShellCommand(
        name='add files',
        command='p4 add *',
        haltOnFailure=True,
        env=p4_env),
    # Finally, submit everything. Have to get a list of files to submit.
    steps.ShellCommand(
        name='submit changes',
        command=['/bin/bash', '-c', r"""cat /usr/local/share/test/p4-submit <(p4 status 2>/dev/null | awk '/submit/ {print "\t"$NF}') | p4 submit -i"""],
        haltOnFailure=True,
        env=p4_env),
])


c['builders'] = [
    util.BuilderConfig(
        name="git-full",
        workernames=["source-full-fresh"],
        factory=git_full_fresh
    ),
    util.BuilderConfig(
        name='p4-add',
        workernames=['source-add'],
        factory=p4_add,
    ),
]

####### PROJECT IDENTITY

c['title'] = "Buildbot Source Step Python %d test" % sys.version_info.major
c['titleURL'] = "https://github.com/buildbot/buildbot"
c['buildbotURL'] = "http://localhost:%s/" % WWW_PORT
c['www'] = dict(port=WWW_PORT,
                plugins=dict(waterfall_view={}, console_view={}, grid_view={}))
# Don't report anything from the container.
c['buildbotNetUsageData'] = None

####### DB URL

c['db'] = {
    'db_url' : "sqlite:///state.sqlite",
}
